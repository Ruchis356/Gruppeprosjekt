import pandas as pd

class RefinedData:

    # ------------------------------------------
    # PROCESSING MISSING DATA
    # ------------------------------------------

    # Check for missing data points and return a list
    def missing_data(self, df, strategy='report', fill_value=None):

        # Adding 'strategy' and 'fill_value' as arguments was a suggestion from AI (DeepSeek)
        """
        Handle missing values in the DataFrame.

        Args:
            df (pd.DataFrame): The DataFrame to check for missing values.
            strategy (str): How to handle missing values ('report', 'drop', or 'fill'). 
            fill_value: The value to use when strategy is 'fill'.

        Returns:
            pd.DataFrame: The processed DataFrame.
        """

        # Check for missing values
        missing_values = df.isna() # df.isna() was suggested by AI (DeepSeek)

        # Initialize an empty list to store missing value locations
        missing_locations = []

        if missing_values.any().any():
            # Iterate over the DataFrame to find exact locations
            for row, col in zip(*missing_values.to_numpy().nonzero()):
                missing_locations.append({'index': row, 'column': df.columns[col]})
            missing_df = pd.DataFrame(missing_locations) 

            # The following block of code was initially suggested and generated by AI before being reworked
            # - Purpose: introducing the 'strategy' method of dealing with missing values
            # - AI Tool: DeepSeek

            # Handle missing values based on the strategy
            if strategy == 'report':
                return missing_df
            elif strategy == 'drop':
                return df.dropna()
            elif strategy == 'fill':
                return df.fillna(fill_value)
        else:
            print("No missing values found in the data set! \n")
            return None 


