
__all__ = ['RefinedData'] 

import pandas as pd
import logging # The use of logging was suggested by AI (DeepSeek)
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class RefinedData:
    """A class to refine data for further analysis.
    
    Primary Methods:
        missing_data(): Handles missing values with multiple strategies
        
    Note:
        All methods use the module-level logger for consistent output
    """

    # ------------------------------------------
    # PROCESSING MISSING DATA
    # ------------------------------------------

    # Check for missing data points and return a list
    def missing_data(
            self, df: pd.DataFrame, 
            strategy: str = 'report', 
            fill_value: float = None
            ) -> pd.DataFrame: # Adding 'strategy' and 'fill_value' as arguments was a suggestion from AI (DeepSeek)

        """
        Handle missing values in the DataFrame.

        Args:
            df (pd.DataFrame): The DataFrame to check for missing values.
            strategy (str): 'report' returns locations of missing values,
                            'drop' removes rows with missing values,
                            'fill' replaces missing values 
            fill_value: The value to use when strategy is 'fill'.

        Returns:
            pd.DataFrame: The processed DataFrame.
        """

        # Including input validation was suggested by AI (DeepSeek)
        if not isinstance(df, pd.DataFrame):
            raise ValueError("Input must be a pandas DataFrame")
        if strategy not in ('report', 'drop', 'fill'):
            raise ValueError("Strategy must be 'report', 'drop', or 'fill'")

        missing_mask = df.isna() # df.isna() was suggested by AI (DeepSeek)
        
        if not missing_mask.any().any():
            logger.info("No missing values found in dataset")
            return None 
        
        # Find missing locations 
        missing_locations = [
            {'index': idx, 'column': col}
            for col in df.columns[missing_mask.any()]
            for idx in df[missing_mask[col]].index
        ]

        # The following block of code was initially suggested and generated by AI before being reworked by developers
            # Purpose: introducing the 'strategy' method of dealing with missing values
            # AI Tool: DeepSeek

        # Handle missing values based on the strategy
        if strategy == 'report':
            return pd.DataFrame(missing_locations)
        elif strategy == 'drop':
            return df.dropna()
        elif strategy == 'fill':
            return df.fillna(fill_value)


